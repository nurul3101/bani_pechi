// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url  =  env("DATABASE_URL")
}
// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
//   shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
// }
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)
  accounts Account[]
}
enum Role {
  USER
  ADMIN
}
model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?
  user User @relation(fields:[userId], references:[id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
/////////////////////////for postgresql start
// model Pech {
//   id          Int     @id @default(autoincrement())
//   createdAt   DateTime   @default(now())
//   updatedAt   DateTime   @updatedAt
//   published   Boolean    @default(true)
//   sku         String
//   title       String
//   description String
//   width       Int
//   height      Int
//   depth       Int
//   constructionMaterial String
//   enclosedSauna String?
//   weightStonesEnclosedSauna Int?
//   fuelType    String
//   chimneyDiameter Int
//   woodLength  Int?
//   weightOfStones Int
//   dimensions  String?
//   guarantee   Int
//   gas         String
//   fireboxMetalThickness Int
//   steamRoomVolume Int
//   price       Int
//   stock       Int?
//   brand       String
//   mark        String?
//   likeCount   Int
//   img1        String?
//   img2        String?
//   img3        String?
//   categoryMain    String?
//   categorySecond1    String?
//   categorySecond2    String?
//   categorySecond3    String?
// }
// model Bak {
//   id          Int     @id @default(autoincrement())
//   createdAt   DateTime   @default(now())
//   updatedAt   DateTime   @updatedAt
//   published   Boolean    @default(false)
//   sku         String
//   title       String
//   description String
//   width       Int
//   height      Int
//   depth       Int
//   constructionMaterial String
//   steelGrade  String
//   chimneyDiameter Int
//   valve       String?
//   tankVolume  Int
//   dimensions  String?
//   guarantee   Int
//   metalThickness Int
//   price       Int
//   stock       Int?
//   brand       String
//   mark        String?
//   likeCount   Int
//   img1        String?
//   img2        String?
//   img3        String?
//   categoryMain    String?
//   categorySecond1    String?
//   categorySecond2    String?
// }
// model Stone {
//   id          Int     @id @default(autoincrement())
//   createdAt   DateTime   @default(now())
//   updatedAt   DateTime   @updatedAt
//   published   Boolean    @default(false)
//   sku         String
//   title       String
//   description String
//   price       Int
//   color       String
//   width       Int
//   height      Int
//   depth       Int
//   packagingOption String
//   productWeight Int
//   materialStone String
//   stoneProcessingType  String
//   stock       Int?
//   brand       String
//   mark        String?
//   likeCount   Int
//   img1        String?
//   img2        String?
//   img3        String?
//   categoryMain    String?
//   categorySecond1    String?
//   categorySecond2    String?
// }
/////////////////////////for postgresql end

// for mongo db start
model Pech {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  published   Boolean    @default(true)
  sku         String
  title       String
  description String
  width       Int
  height      Int
  depth       Int
  constructionMaterial String
  enclosedSauna String?
  weightStonesEnclosedSauna Int?
  fuelType    String
  chimneyDiameter Int
  woodLength  Int?
  weightOfStones Int
  dimensions  String?
  guarantee   Int
  gas         String
  fireboxMetalThickness Int
  steamRoomVolume Int
  price       Int
  stock       Int?
  brand       String
  mark        String?
  likeCount   Int
  img1        String?
  img2        String?
  img3        String?
  categoryMain    String?
  categorySecond1    String?
  categorySecond2    String?
  categorySecond3    String?
}
// model CategoryPech {
//   id          String     @id @default(auto()) @map("_id") @db.ObjectId
//   title       String     @unique
//   CategoryPechIDs     String?  @db.ObjectId
//   peches      Pech?    @relation(fields: [CategoryPechIDs], references: [id])
// }
// model ImgPech {
//   id          String    @id @default(auto()) @map("_id") @db.ObjectId
//   src         String
//   imgPechId   String? @db.ObjectId
//   peches     Pech? @relation(fields: [imgPechId], references: [id])
// }
model Bak {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  published   Boolean    @default(false)
  sku         String
  title       String
  description String
  width       Int
  height      Int
  depth       Int
  constructionMaterial String
  steelGrade  String
  chimneyDiameter Int
  valve       String?
  tankVolume  Int
  dimensions  String?
  guarantee   Int
  metalThickness Int
  price       Int
  stock       Int?
  brand       String
  mark        String?
  likeCount   Int
  img1        String?
  img2        String?
  img3        String?
  categoryMain    String?
  categorySecond1    String?
  categorySecond2    String?
}
// model CategoryBak {
//   id          String    @id @default(auto()) @map("_id") @db.ObjectId
//   title       String
//   bakIDs     String[]  @db.ObjectId
//   baki        Bak[] @relation(fields: [bakIDs], references: [id])
// }
// model ImgBak {
//   id          String    @id @default(auto()) @map("_id") @db.ObjectId
//   src         String
//   imgBakId String? @db.ObjectId
//   baki        Bak? @relation(fields: [imgBakId], references: [id]) 
// }
model Stone {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  published   Boolean    @default(false)
  sku         String
  title       String
  description String
  price       Int
  color       String
  width       Int
  height      Int
  depth       Int
  packagingOption String
  productWeight Int
  materialStone String
  stoneProcessingType  String
  stock       Int?
  brand       String
  mark        String?
  likeCount   Int
  img1        String?
  img2        String?
  img3        String?
  categoryMain    String?
  categorySecond1    String?
  categorySecond2    String?
}
// model CategoryStone {
//   id          String    @id @default(auto()) @map("_id") @db.ObjectId
//   title       String
//   stoneIDs     String[] @db.ObjectId
//   stones     Stone[] @relation(fields: [stoneIDs], references: [id])
// }
// model ImgStone {
//   id          String    @id @default(auto()) @map("_id") @db.ObjectId
//   src         String
//   imgStoneId String? @db.ObjectId
//   stones     Stone? @relation(fields: [imgStoneId], references: [id])
// }
// for mongo db end